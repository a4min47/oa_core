<?php
/**
 * @file
 * Code for the Open Atrium Access module.
 */

/**
 * Path to the Group admin page.
 */
define('OA_ACCESS_GROUP_ADMIN_PATH', 'groups/oa_access');

/**
 * Path to the Team admin pages.
 */
define('OA_ACCESS_TEAM_ADMIN_PATH', 'group/%/%/admin/oa_access');

/**
 * Permission type -- Allows permission to be assigned to a Team.
 */
define('OA_ACCESS_TEAM_PERMISSION', 1);

/**
 * Permission type -- Allows permission to be assigned to a Group.
 */
define('OA_ACCESS_GROUP_PERMISSION', 2);

/**
 * Permission type -- Allows permission to be assigned to either Team or Group.
 */
define('OA_ACCESS_DEFAULT_PERMISSION', OA_ACCESS_TEAM_PERMISSION | OA_ACCESS_GROUP_PERMISSION);

/**
 * Implements hook_menu().
 */
function oa_access_menu() {
  $items = array();
  $items[OA_ACCESS_GROUP_ADMIN_PATH] = array(
    'title' => 'Group permissions',
    'description' => 'Configure which Groups have which permissions.',
    'access arguments' => array('administer oa_access permissions'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oa_access_group_permissions_form'),
    'file' => 'oa_access.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  if (module_exists('oa_teams')) {
    $items[OA_ACCESS_TEAM_ADMIN_PATH] = array(
      'title' => 'Team permissions',
      'description' => 'Configure which Teams have which permissions.',
      'access callback' => 'og_ui_user_access_group',
      'access arguments' => array('administer oa_access permissions', 1, 2),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('oa_access_team_permissions_form', 1, 2),
      'file' => 'oa_access.admin.inc',
      'type' => MENU_NORMAL_ITEM,
    );
  }
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function oa_access_menu_alter(&$items) {
  if (!isset($items['groups/list'])) {
    $items['groups/list'] = array(
      'title' => 'List',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
  }
}

/**
 * Implements hook_og_ui_get_group_admin().
 */
function oa_access_og_ui_get_group_admin($group_type, $gid) {
  $items = array();

  if (module_exists('oa_teams') && og_user_access($group_type, $gid, 'administer oa_access permissions')) {
    $items['oa_access'] = array(
      'title' => t('Team permissions'),
      'description' => t('Configure which Teams have which permissions.'),
      'href' => 'admin/oa_access',
    );
  }

  return $items;
}

/**
 * Implements hook_strongarm_alter().
 */
function oa_access_strongarm_alter(&$items) {
  if (isset($items['contextual_tabs_extract'])) {
    $items['contextual_tabs_extract']->value .= "\n" . implode("\n", array(
      "groups:Group permissions,icon-user",
      "List,icon-th-list",
    ));
  }
}

/**
 * Implements hook_permission().
 */
function oa_access_permission() {
  return array(
    'administer oa_access permissions' => array(
      'title' => t('Administer Open Atrium Access permissions'),
      'description' => t('Allows users to configure which Groups have which permissions.'),
    ),
  );
}

/**
 * Implements hook_og_permission().
 */
function oa_access_og_permission() {
  return array(
    'administer oa_access permissions' => array(
      'title' => t('Administer Open Atrium Access permissions'),
      'description' => t('Allows users to configure which Teams have which permissions.'),
      'default role' => array(OG_ADMINISTRATOR_ROLE),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function oa_access_theme() {
  return array(
    'oa_access_permissions_form' => array(
      'render element' => 'permissions',
      'file' => 'oa_access.theme.inc',
    ),
  );
}

/**
 * Implements hook_node_delete().
 */
function oa_access_node_delete($node) {
  db_delete('oa_access')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_modules_uninstalled().
 */
function oa_access_modules_uninstalled($modules) {
  db_delete('oa_access')
    ->condition('module', $modules, 'IN')
    ->execute();
}

/**
 * Get all permissions defined by implementing modules.
 *
 * @param boolean $reset
 *   (Optional) If set to TRUE, it will reset the static cache.
 *
 * @return array
 *   Associative array keyed with the permission name containing associative
 *   arrays with the following keys:
 *   - title: Human readable name of the permission.
 *   - description: Human readable description of the permission.
 *   - module: The machine name of the module which defines it.
 *   - type: Flags specifying if can be used for Groups or Teams or both.
 */
function oa_access_get_permissions($reset = FALSE) {
  if ($reset) {
    drupal_static_reset(__FUNCTION__);
  }
  $perms =& drupal_static(__FUNCTION__, NULL);
  if (is_null($perms)) {
    $perms = array();
    foreach (module_implements('oa_access_permission') as $module) {
      if ($result = module_invoke($module, 'oa_access_permission')) {
        foreach ($result as $key => $perm) {
          $perms[$key] = array_merge($perm, array(
            'module' => $module,
          ));
          if (empty($perms[$key]['type'])) {
            $perms[$key]['type'] = OA_ACCESS_DEFAULT_PERMISSION;
          }
        }
      }
    }

    drupal_alter('oa_access_permission', $perms);
  }
  return $perms;
}

/**
 * Get a list of this user's Groups and Teams.
 * 
 * @param object|NULL $user 
 *   (Optional) The user to get groups for. If NULL, it will find groups for
 *   the currently logged in user.
 * @param integer $space_nid 
 *   (Optional) The nid of a Space. If given, this will include the Teams
 *   from the given Space. If not given, then Teams won't be included.
 *
 * @return array
 *   An associative array keyed by group nid containing associative arrays with
 *   the following keys:
 *   - nid: The group nid.
 *   - type: The node type (ex: oa_group, oa_team).
 */
function oa_access_user_groups($account = NULL, $space_nid = 0) {
  global $user;

  if (is_null($account)) {
    $account = $user;
  }

  $cache =& drupal_static(__FUNCTION__, array());

  if (!isset($cache[$space_nid][$account->uid])) {
    if (!isset($cache[0][$account->uid])) {
      // First, get all the users oa_groups.
      $query = db_select('og_membership', 'og');
      $query->innerJoin('node', 'n', 'og.gid = n.nid');
      $query
        ->fields('n', array('nid', 'type'))
        ->condition('og.group_type', 'node')
        ->condition('og.entity_type', 'user')
        ->condition('og.state', OG_STATE_ACTIVE)
        ->condition('n.type', 'oa_group')
        ->condition('og.etid', $account->uid);

      $groups = array();
      foreach ($query->execute() as $row) {
        $groups[$row->nid] = array(
          'nid'  => $row->nid,
          'type' => $row->type,
        );
      }

      $cache[0][$account->uid] = $groups;
    }

    if (module_exists('oa_teams') && $space_nid) {
      $valid_teams = oa_teams_get_teams_for_space($space_nid);

      // Then, we get all the user's oa_teams, optionally filtering by valid
      // teams for this particular Space.
      $query = db_select('field_data_' . OA_TEAM_USERS_FIELD, 'f')
        ->fields('f', array('entity_id'))
        ->condition('entity_type', 'node')
        ->condition('deleted', 0)
        ->condition(OA_TEAM_USERS_FIELD . '_target_id', $account->uid);

      $teams = array();
      foreach ($query->execute() as $row) {
        // TODO: we could move this into the $query itself?
        if (isset($valid_teams[$row->entity_id])) {
          $teams[$row->entity_id] = array(
            'nid' => $row->entity_id,
            'type' => 'oa_team',
          );
        }
      }

      // Combine the cached Groups with the Teams to get the full result.
      //$cache[$space_nid][$account->uid] = array_merge($cache[0][$account->uid], $teams);
      $cache[$space_nid][$account->uid] = $cache[0][$account->uid] + $teams;
    }
  }

  return $cache[$space_nid][$account->uid];
}

/**
 * Gets all the permissions that a list of groups have.
 *
 * @param array $groups
 *   An array of nids of Groups or Teams.
 * 
 * @return array
 *   An associative array keyed by group nid containing associative arrays
 *   keyed by the module and containing an array of permission names, for
 *   example:
 *   @code
 *   array('27' => array('mymodule' => array('a permission')))
 *   @endcode
 *   Which signifies that the group with nid 27 has 'a permission' from
 *   a module called 'mymodule'.
 *
 * @see oa_access_set_group_permissions()
 */
function oa_access_get_group_permissions($groups) {
  $cache =& drupal_static(__FUNCTION__, array());

  // First, go through the static cache and any groups we don't have data
  // for to the $missing array.
  $missing = array();
  foreach ($groups as $gid) {
    if (!isset($cache[$gid])) {
      $missing[] = $gid;
    }
  }

  // Next, query any of the missing groups from the database and add them to
  // the static cache.
  if (!empty($missing)) {
    $query = db_select('oa_access', 'a')
      ->fields('a', array('nid', 'permission', 'module'))
      ->condition('a.nid', $missing, 'IN');
    foreach ($query->execute() as $row) {
      $cache[$row->nid][$row->module][] = $row->permission;
    }
  }

  // Finally, add all the necessary permissions from the static cache and
  // return it!
  $return = array();
  foreach ($groups as $gid) {
    $return[$gid] = isset($cache[$gid]) ? $cache[$gid] : array();
  }
  return $return;
}

/**
 * Changes the permissions for a set of groups.
 *
 * @param array $group_permissions
 *   An associatiive array keyed by Group or Team nid containing associative
 *   arrays keyed by module containing a list of permissions, for example:
 *   @code
 *   array('27' => array('mymodule' => array('a permission')))
 *   @endcode
 *   Which signifies that the group with nid 27 has 'a permission' from
 *   a module called 'mymodule'.
 *
 * @see oa_access_get_group_permissions()
 */
function oa_access_set_group_permissions($group_permissions) {
  $cache =& drupal_static('oa_access_get_group_permissions', array());

  // Delete current permissions for the given groups.
  db_delete('oa_access')
    ->condition('nid', array_keys($group_permissions), 'IN')
    ->execute();

  // Then build them back up!
  foreach ($group_permissions as $nid => $modules) {
    foreach ($modules as $module => $permissions) {
      foreach ($permissions as $name) {
        db_insert('oa_access')
          ->fields(array(
            'nid' => $nid,
            'permission' => $name,
            'module' => $module,
          ))
          ->execute();
      }
      
      // Replace these entries in the cache, so that we don't have to pull them
      // from the database at all!
      $cache[$nid] = $modules;
    }
  }
}

/**
 * Gets a combined list of the permissions that a list of groups can perform.
 *
 * The permissions of all the groups are combined, such that if any group in
 * the list has permission, it will be returned.
 *
 * @param array $groups
 *   An array of nids of Groups or Teams.
 * 
 * @return array
 *   @code
 *   array('one permission' => TRUE, 'an other permission' => TRUE)
 *   @endcode
 *   Which signifies that the combined permissions of the given groups
 *   include 'one permission' and 'an other permission'.
 */
function oa_access_get_group_permissions_combined($groups) {
  $return = array();
  foreach (oa_access_get_group_permissions($groups) as $gid => $modules) {
    foreach ($modules as $perms) {
      foreach ($perms as $name) {
        $return[$name] = TRUE;
      }
    }
  }
  return $return;
}

/**
 * Determines if the user has a permission.
 *
 * This is based on the user's membership in an Open Atrium Group or Team in
 * the same way that user_access() is based on a user's membership in a role.
 *
 * @param object|NULL $space
 *   The Space in which we want to perform the action. You can pass NULL if
 *   there is no Space active (this will mean that Team permissions won't be
 *   considered).
 * @param string $permission
 *   The machine name of the permission we are checking.
 * @param object|NULL $account
 *   (Optional) A user object representing the user to check. If NULL, it will
 *   check for the currently logged in user.
 *
 * @returns boolean
 *   TRUE if the user has permission; otherwise FALSE.
 */
function oa_access($space, $permission, $account = NULL) {
  global $user;

  if (is_null($account)) {
    $account = $user;
  }

  // This function is most commonly called with the same $account but different
  // $permissions's. So the layout of the static cache is optimized for that case.
  //
  // Also, when Teams come into play, access is dependent on the Space which the
  // node belongs to. This is because permission gained by membership in a Team
  // on Space A shouldn't give you that permission when editting content in
  // Space B.
  //
  // So, the cache looks like this:
  //
  //   $cache[$space_nid][$account->uid][$permission] = TRUE;
  //
  // However, if oa_teams is disabled, we'll use a constant for $space_nid to
  // group everything togather for a modest performance boost.
  //
  $cache =& drupal_static(__FUNCTION__, array());

  $space_nid = !module_exists('oa_teams') ? 0 : ($space ? $space->nid : 0);

  if (!isset($cache[$space_nid][$account->uid])) {
    $groups = oa_access_user_groups($account, $space_nid);
    $perms = oa_access_get_group_permissions_combined(array_keys($groups));
    $cache[$space_nid][$account->uid] = $perms;
  }

  return isset($cache[$space_nid][$account->uid][$permission]);
}

/**
 * Removes left over permissions that are no longer valid.
 *
 * @param string|NULL $module
 *   (Optional) If specified it will only attempt to cleanup permissions for
 *   the given module; otherwise it'll do them all.
 */
function oa_access_cleanup_permissions($module = NULL) {
  $valid_permissions = oa_access_get_permissions();

  $query = db_select('oa_access', 'a')
    ->distinct()
    ->fields('a', array('permission'));
  if ($module) {
    $query->condition('a.module', $module);
  }
  
  // Find all the permissions in the database which aren't declared by
  // hook_oa_access_permission().
  $invalid = array();
  foreach ($query->execute() as $row) {
    if (!isset($valid_permissions[$row->permission])) {
      $invalid[] = $row->permission;
    }
  }

  // And delete them!
  if (!empty($invalid)) {
    db_delete('oa_access')
      ->condition('permission', $invalid, 'IN')
      ->execute();
  }
}

<?php
/**
 * @file
 * Code for the OpenAtrium2 Section Pages feature.
 */

include_once 'oa_sections.features.inc';

/**
 * Name of default OpenAtrium Group field in Section.
 */
define('OA_GROUP_FIELD', 'field_oa_group_ref');
/**
 * Name of default OpenAtrium Team field in Section.
 */
define('OA_TEAM_FIELD', 'field_oa_team_ref');
/**
 * Name of default OpenAtrium User field in Section.
 */
define('OA_USER_FIELD', 'field_oa_user_ref');

/**
 * Implements hook_og_menu_single_menu_parent().
 */
function oa_sections_og_menu_single_menu_parent($conf) {
  if ($plid = og_menu_single_get_active_plid()) {
    $node = menu_get_object();
    if ($node && $node->type == 'oa_section') {
      // Menu will be cached via core, so just get it.and look for the parent
      $section_id = $node->nid;
    }
    elseif ($node && ($values = field_get_items('node', $node, 'oa_section_ref'))) {
      $value = reset($values);
      $section_id = $value['target_id'];
    }
    else {
      $section_id = oa_core_get_section_context();
    }
    // If in a section, find the the secondary link that section is in.
    if ($section_id) {
      if ($mlid = og_menu_single_get_link_mlid('node', $section_id)) {
        foreach (og_menu_single_children_items($plid) as $item) {
          if (_oa_sections_is_parent($item, $mlid)) {
            return $item['link']['mlid'];
          }
        }
      }
    }
  }
}

/**
 * Helpder function to determine if an item or it's children have a mlid.
 */
function _oa_sections_is_parent($item, $mlid) {
  if ($item['link']['mlid'] == $mlid) {
    return TRUE;
  }
  foreach ($item['below'] as $child_item) {
    if (_oa_sections_is_parent($child_item, $mlid)) {
      return TRUE;
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function oa_sections_query_entityreference_alter($query) {
  $field = $query->alterMetaData['entityreference_selection_handler']->field;
  $current_query_conditions = $query->alterMetaData['entity_field_query']->entityConditions;
  if ($field && $field['field_name'] == 'oa_section_ref' && empty($current_query_conditions['entity_id'])) {
    $entity = $query->alterMetaData['entityreference_selection_handler']->entity;

    // A space is active, limit to sections in that space.
    if ($value = _oa_sections_get_current_selected_space($entity)) {
      $query->join('og_membership', 'omrol', 'node.nid = omrol.etid and omrol.entity_type = :entity_type AND omrol.field_name = :field_name AND omrol.gid = :target_id', array(':target_id' => $value, ':entity_type' => 'node', ':field_name' => 'og_group_ref'));
    }
    // Don't want to show all sections ever, so zero it out.
    else {
      $query->condition('1', '0', '=');
    }
  }
}

/**
 * Get the currently selected group.
 */
function _oa_sections_get_current_selected_space($entity, $set_value = NULL) {
  static $found_value;
  if (isset($set_value)) {
    $found_value = $set_value;
  }
  if (isset($found_value)) {
    return $found_value ? $found_value : NULL;
  }
  $value = NULL;
  if (isset($_POST['og_group_ref'])) {
    $process = $_POST['og_group_ref'];
  }
  elseif ($entity && isset($entity->og_group_ref)) {
    $process = $entity->og_group_ref;
  }
  // First check active view filter
  if (!empty($_GET['og_group_ref_target_id'])) {
    $value = $_GET['og_group_ref_target_id'];
  }
  // For panelizer settings.
  elseif (!empty($_POST['exposed']['og_group_ref_target_id'])) {
    $value = $_POST['exposed']['og_group_ref_target_id'];
  }
  // Check post or entity values.
  elseif (isset($process) && is_array($process)) {
    if (!empty($process[LANGUAGE_NONE][0]['target_id'])) {
      $value = $process[LANGUAGE_NONE][0]['target_id'];
    }
    elseif (!empty($process[LANGUAGE_NONE][0]['default'])) {
      $value = $process[LANGUAGE_NONE][0]['default'];
    }
  }
  else {
    $value = oa_core_get_space_context();
  }
  $found_value = $value;
  // Make sure the current user has access.
  if (!is_numeric($value) || !($node = node_load($value)) || !node_access('view', $node)) {
    $found_value = FALSE;
    return NULL;
  }
  return $value;
}

/**
 * Implements hook_pathauto().
 */
function oa_sections_pathauto($op) {
  switch ($op) {
    case 'settings':
      $settings = array();
      $settings['module'] = 'oa_core';
      $settings['token_type'] = 'node';
      $settings['groupheader'] = t('Open Atrium Sections');
      $settings['patterndescr'] = t('Pattern for Sections');
      $settings['patterndefault'] = '(set Section node patterns below) [node:title]';
      $settings['batch_update_callback'] = 'oa_sections_pathauto_bulk_update_batch_process';
      $settings['batch_file'] = drupal_get_path('module', 'oa_sections') . '/oa_sections.module';
      return (object) $settings;
    default:
      break;
  }
}

/**
 * Batch processing callback; Generate aliases for nodes.
 * Copied from Nodes, modified slightly to only affect OA Sections
 */
function oa_sections_pathauto_bulk_update_batch_process(&$context) {
  if (!isset($context['sandbox']['current'])) {
    $context['sandbox']['count'] = 0;
    $context['sandbox']['current'] = 0;
  }

  $query = db_select('node', 'n');
  $query->leftJoin('url_alias', 'ua', "CONCAT('node/', n.nid) = ua.source");
  $query->addField('n', 'nid');
  $query->isNull('ua.source');
  $query->condition('n.nid', $context['sandbox']['current'], '>');
  $query->condition('n.type', OA_SECTION_TYPE);
  $query->orderBy('n.nid');
  $query->addTag('pathauto_bulk_update');
  $query->addMetaData('entity', 'node');

  // Get the total amount of items to process.
  if (!isset($context['sandbox']['total'])) {
    $context['sandbox']['total'] = $query->countQuery()->execute()->fetchField();

    // If there are no nodes to update, the stop immediately.
    if (!$context['sandbox']['total']) {
      $context['finished'] = 1;
      return;
    }
  }

  $query->range(0, 25);
  $nids = $query->execute()->fetchCol();

  pathauto_node_update_alias_multiple($nids, 'bulkupdate');
  $context['sandbox']['count'] += count($nids);
  $context['sandbox']['current'] = max($nids);
  $context['message'] = t('Updated alias for node @nid.', array('@nid' => end($nids)));

  if ($context['sandbox']['count'] != $context['sandbox']['total']) {
    $context['finished'] = $context['sandbox']['count'] / $context['sandbox']['total'];
  }
}


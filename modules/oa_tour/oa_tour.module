<?php

/**
 * @file
 * Code for the Open Atrium Bootstrap Tour customizations.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function oa_tour_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_theme()
 */
function oa_tour_theme() {
  return array(
    'oa_tour_dropdown' => array(
      'template'  => 'oa-tour-dropdown',
      'path' => drupal_get_path('module', 'oa_tour') . '/templates',
    ),
  );
}

/**
 * Implements hook_bootstrap_tour_alter().
 */
function oa_tour_bootstrap_tour_alter(&$tour) {
  if (empty($tour) || empty($tour->steps)) {
    return;
  }
  foreach ($tour->steps as $key => $step) {
    if (empty($step['path'])) {
      continue;
    }
    $path_parts = explode('/', $step['path']);
    if ($path_parts[0] == 'firstnode' && count($path_parts) > 1) {
      $node_type = $path_parts[1];
      $nid = db_select('node', 'n')
        ->fields('n', array('nid'))
        ->condition('type', $node_type)
        ->orderBy('nid', 'ASC')
        ->range(0,1)
        ->execute()
        ->fetchField();
      if (empty($nid)) {
        $tour->steps[$key]['path'] = 'node/add/' . str_replace('_', '-', $node_type);
        if (!empty($path_parts[2])) {
          $tour->steps[$key]['path'] .= '?tour=' . $path_parts[2];
        }
      } else {
        $tour->steps[$key]['path'] = 'node/' . $nid . '?tour=' . $tour->name;
      }
    }
  }
}
